Programmation Générale

1. Ecrire une regexp qui détecterait les nombres hexadécimaux dans un text
‘0x0f4’, ‘0acdadecf822eeff32aca5830e438cb54aa722e3’, ‘8BADF00D’ devraient tous être détectés

> /[xX]?\h+/

2. Ci-dessous le pseudo-code d'une fonction récursive
-  f(0) = 1;
-  f(1) = 3;
-  f(n)= 3 * f(n-1) - f(n-2);
Implémentez la fonction f sans qu'elle soit récursive

> je remarque que c'est la fonction correspond aux résultats des nombres paires de la suite de fibonacci (2, 4...)
def f(n)
  a = 1/Math.sqrt(5)
  b = (1 + Math.sqrt(5))/2
  c = (1 - Math.sqrt(5))/2
  return (a * (b**(2*(n+1) - c**(2*(n+1))).round
end




Ruby on Rails

1. Quelles seraient les premières étapes à prendre pour refacto un projet où les controllers sont trop longs?

> 1. repérer les partie de code qui sont récurente dans plusieur controlleur et créer des méthodes à part pour exécuter ces morceau de code
  2. repérer les assignement de variable inutile (par exemple: nom_variable = parametre1), remplacer les endroits où la variable est utilisé par le bon nom de variable
  3. Utiliser des expression ternaire à la place de if si possible (1 ligne vs min 3 lignes)


2. Qu'est-ce que le N+1 et comment l'éviter en Rails?

> Le N+1 est un problème de chargement trop long lié à des requetes SQL mal optimisées de model enfant à partir de model parents.
Pour l'éviter, on peut:
- faire une requette SQL avec un join
- eager loading
- faire une requète customisée (en SQL pure sans utiliser ActiveRecord)

3. D'un point de vue pratique, quel intérêt à utiliser des constantes dans une app Rails? Quelles implémentations avez-vous vu/mis en place?

> Cela permet d'avoir une valeur accessible en tout point avec un temps de chargement court parce qu'une constante est garde la même adresse dans la mémoire, pas de requete SQL.

4. Décrivez une fonction de Ruby trop peu utilisée à votre goût

> Les fonctions de réflexion ce sont des fonction qui permettent au code d'avoir un comportement dynamique en fonction de son environnement.
Ex:
.defined?(some_var) => permet de savoir si une variable est définit dans le contexte courant
.respond_to? :function => permet de savoir si un objet répond à une méthode donnée
.instance_of?(ClassName) => répond "True" si la classe de l'objet correspond exactement à celle informé dans les paramètres




Architecture

1. Une entreprise veut créer un système de notification pour son site.
Chaque type de notification a besoin de 'variables' différentes:
(x a aimé le projet de y, le projet x vient d'être mis à jour, etc.)
La base de données est en PostgreSQL.
Proposez une structure de données et une implémentation en back-end qui permettrait d'être assez flexible
tout en réduisant la possibilité de bugs et de structures non conformes

>
Notification
id - bigint
link - JSON
created_at
updated_at

link =
{
  "objects": [
    {
      "class": "User",
      "id": 4864,
      "name": "x"
    },
    {
      "class": "User",
      "id": 4896,
      "name": "y"
    },
    {
      "class": "Projet",
      "id": 159,
      "name": "x"
    },
  ],
  "action": "a aimé"
}

on peut alors avoir une notification qui est indépendante des objets auquel elle fait référence.
La construction de la phrase de notification peut alors dépendre du verbe d'action mis dans "action"


2. Décrivez les objets et la structure de donnée que vous utiliseriez pour implémenter un jeu de Touché-Coulé

>

Liste objets:
- Partie [id, date, id_joueur1, id_joueur2, date(date)]
- Joueur [id, nom(string)]
- Plateau [id, joueur_id, taille(integer)]
- Bateau [id, plateau_id, nom(string)]
- Coordonnee [id, bateau_id, x(integer), y(integer), touche(boolean)]
- Tour [id, joueur_id, ordre(integer), x(integer), y(integer), touche(boolean)]

Au début de la partie, chaque joueur dispose ses bateau (instance Bateau et Case crées)
Chaque joueur crée une instance de Tour à chaque tour,
A la création de cette instance l'application va checker si l'autre joueur de la partie a une instance Case avec les mêmes coordonnées x et y que l'instance de Tour créé.
Si l'autre joueur a une instance Case avec les meme coordonnées, la valeur de l'attribut "touche" de cette instance passe à "True", de meme pour l'instance de Tour. Si une instance de Bateau a toute ses instances de Case avec l'attribut "touche" vrai, il est déclaré coulé, et est supprimé. Si un joueur n'a plus de bateau, alors il a perdu et l'autre joueur a gagné.

Voir XML ci dessous


#################################################################


<?xml version="1.0" encoding="utf-8" ?>
<!-- SQL XML created by WWW SQL Designer, https://github.com/ondras/wwwsqldesigner/ -->
<!-- Active URL: http://db.lewagon.com/ -->
<sql>
<datatypes db="mysql">
  <group label="Numeric" color="rgb(238,238,170)">
    <type label="Integer" length="0" sql="INTEGER" quote=""/>
    <type label="TINYINT" length="0" sql="TINYINT" quote=""/>
    <type label="SMALLINT" length="0" sql="SMALLINT" quote=""/>
    <type label="MEDIUMINT" length="0" sql="MEDIUMINT" quote=""/>
    <type label="INT" length="0" sql="INT" quote=""/>
    <type label="BIGINT" length="0" sql="BIGINT" quote=""/>
    <type label="Decimal" length="1" sql="DECIMAL" re="DEC" quote=""/>
    <type label="Single precision" length="0" sql="FLOAT" quote=""/>
    <type label="Double precision" length="0" sql="DOUBLE" re="DOUBLE" quote=""/>
  </group>

  <group label="Character" color="rgb(255,200,200)">
    <type label="Char" length="1" sql="CHAR" quote="'"/>
    <type label="Varchar" length="1" sql="VARCHAR" quote="'"/>
    <type label="Text" length="0" sql="MEDIUMTEXT" re="TEXT" quote="'"/>
    <type label="Binary" length="1" sql="BINARY" quote="'"/>
    <type label="Varbinary" length="1" sql="VARBINARY" quote="'"/>
    <type label="BLOB" length="0" sql="BLOB" re="BLOB" quote="'"/>
  </group>

  <group label="Date &amp; Time" color="rgb(200,255,200)">
    <type label="Date" length="0" sql="DATE" quote="'"/>
    <type label="Time" length="0" sql="TIME" quote="'"/>
    <type label="Datetime" length="0" sql="DATETIME" quote="'"/>
    <type label="Year" length="0" sql="YEAR" quote=""/>
    <type label="Timestamp" length="0" sql="TIMESTAMP" quote="'"/>
  </group>

  <group label="Miscellaneous" color="rgb(200,200,255)">
    <type label="ENUM" length="1" sql="ENUM" quote=""/>
    <type label="SET" length="1" sql="SET" quote=""/>
    <type label="Bit" length="0" sql="bit" quote=""/>
  </group>
</datatypes><table x="615" y="309" name="joueur">
<row name="id" null="1" autoincrement="1">
<datatype>INTEGER</datatype>
<default>NULL</default></row>
<row name="nom" null="1" autoincrement="0">
<datatype>VARCHAR</datatype>
<default>NULL</default></row>
<key type="PRIMARY" name="">
<part>id</part>
</key>
</table>
<table x="423" y="264" name="partie">
<row name="id" null="1" autoincrement="1">
<datatype>INTEGER</datatype>
<default>NULL</default></row>
<row name="id_joueur1" null="1" autoincrement="0">
<datatype>INTEGER</datatype>
<default>NULL</default><relation table="joueur" row="id" />
</row>
<row name="id_joueur2" null="1" autoincrement="0">
<datatype>INTEGER</datatype>
<default>NULL</default><relation table="joueur" row="id" />
</row>
<row name="date" null="1" autoincrement="0">
<datatype>DATE</datatype>
<default>NULL</default></row>
<key type="PRIMARY" name="">
<part>id</part>
</key>
</table>
<table x="812" y="290" name="plateau">
<row name="id" null="1" autoincrement="1">
<datatype>INTEGER</datatype>
<default>NULL</default></row>
<row name="id_joueurs" null="1" autoincrement="0">
<datatype>INTEGER</datatype>
<default>NULL</default><relation table="joueur" row="id" />
</row>
<key type="PRIMARY" name="">
<part>id</part>
</key>
</table>
<table x="994" y="268" name="bateau">
<row name="id" null="1" autoincrement="1">
<datatype>INTEGER</datatype>
<default>NULL</default></row>
<row name="id_plateau" null="1" autoincrement="0">
<datatype>INTEGER</datatype>
<default>NULL</default><relation table="plateau" row="id" />
</row>
<row name="nom" null="1" autoincrement="0">
<datatype>VARCHAR</datatype>
<default>NULL</default></row>
<key type="PRIMARY" name="">
<part>id</part>
</key>
</table>
<table x="822" y="390" name="tour">
<row name="id" null="1" autoincrement="1">
<datatype>INTEGER</datatype>
<default>NULL</default></row>
<row name="id_joueur" null="1" autoincrement="0">
<datatype>INTEGER</datatype>
<default>NULL</default><relation table="joueur" row="id" />
</row>
<row name="ordre" null="1" autoincrement="0">
<datatype>INTEGER</datatype>
<default>NULL</default></row>
<row name="x" null="1" autoincrement="0">
<datatype>INTEGER</datatype>
<default>NULL</default></row>
<row name="y" null="1" autoincrement="0">
<datatype>INTEGER</datatype>
<default>NULL</default></row>
<row name="touche" null="1" autoincrement="0">
<datatype>BINARY</datatype>
<default>NULL</default></row>
<key type="PRIMARY" name="">
<part>id</part>
</key>
</table>
<table x="1152" y="248" name="case">
<row name="id" null="1" autoincrement="1">
<datatype>INTEGER</datatype>
<default>NULL</default></row>
<row name="id_bateau" null="1" autoincrement="0">
<datatype>INTEGER</datatype>
<default>NULL</default><relation table="bateau" row="id" />
</row>
<row name="x" null="1" autoincrement="0">
<datatype>INTEGER</datatype>
<default>NULL</default></row>
<row name="y" null="1" autoincrement="0">
<datatype>INTEGER</datatype>
<default>NULL</default></row>
<row name="touche" null="1" autoincrement="0">
<datatype>BINARY</datatype>
<default>NULL</default></row>
<key type="PRIMARY" name="">
<part>id</part>
</key>
</table>
</sql>


